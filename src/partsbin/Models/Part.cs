using System;
using System.Reflection.Metadata;
using System.Text;
using partsbin.Helpers;

namespace partsbin.Models
{
    /// <summary>
    /// Note that nothing is required except for the quantity, which is fine at
    /// the default of zero. Some parts might not have an appropriate package
    /// type or value, for example a dev board would just be:
    /// const arduinoDuo = new Part
    /// {
    ///     PartType = "Development board",
    ///     Range = "Arduino",
    ///     PartName = "Arduino Duo",
    ///     PartNumber = "ABC123",
    ///     Quantity = 2,
    ///     Location = "Shelf 2 Box 1"
    /// };
    /// </summary>
    public class Part
    {
        /// <summary>
        /// The autogenerated primary key of the part
        /// </summary>
        public int Id { get; set; }
        
        public bool IsDeleted { get; set; }

        /// <summary>
        /// eg "Development board"
        /// </summary>
        public string? PartType { get; set; } = "";

        /// <summary>
        /// eg "ESP8266"
        /// </summary>
        public string? Range { get; set; } = "";

        /// <summary>
        /// eg "WiFi Mini ESP8266"
        /// </summary>
        public string? PartName { get; set; }

        /// <summary>
        /// eg. "DIP"
        /// </summary>
        public string? PackageType { get; set; }

        /// <summary>
        /// eg "0.1"
        /// </summary>
        public decimal? Value { get; set; }

        /// <summary>
        /// // eg "uF"
        /// </summary>
        public string? ValueUnit { get; set; }

        /// <summary>
        /// eg "XC3802"
        /// </summary>
        public string? PartNumber { get; set; }

        /// <summary>
        /// The quantity of this exact part (type, range, name, package type,
        /// value, unit, etc) on the shelf
        /// </summary>
        public int Quantity { get; set; }

        /// <summary>
        /// The physical location of these parts in the workshop
        /// eg "Shelf 4 Rack 2 Tray 6"
        /// </summary>
        public string? Location { get; set; }

        /// <summary>
        /// eg "Qualcomm"
        /// </summary>
        public string? Manufacturer { get; set; }

        public string Notes { get; set; } = string.Empty;
        public string HtmlNotes { get; set; } = string.Empty;

        /// <summary>
        /// Documents relating to the part - eg. data sheets, programming guides
        /// </summary>
        public List<PartDocument> Documents { get; set; } = new List<PartDocument>();

        /// <summary>
        /// Suppliers for the part
        /// </summary>
        public List<Supplier> Suppliers { get; set; } = new List<Supplier>();

        public string Description
        {
            get
            {
                var sb = new StringBuilder();
                
                if (PartType.HasContent()) sb.Append(PartType + " - ");
                if (Range.HasContent()) sb.Append(Range + " - ");
                if (PartName.HasContent()) sb.Append(PartName + " - ");
                if (Value is not null) sb.Append(FormattedValue + " - ");
                if (PartNumber.HasContent()) sb.Append(PartNumber + " - ");

                if (sb.Length == 0) return "---";
                
                sb.Remove(sb.Length - 3, 3);
                
                return sb.ToString();
            }
        }

        public string FormattedQuantity => $"{Quantity} {(Quantity != 1 ? "units" : "unit")}";
        public string FormattedValue => Value is null
            ? "---" 
            : $"{Value.FormatCompact(0)}{ValueUnit}";

        /// <summary>
        /// Clones every property of this part, except for the ID
        /// </summary>
        /// <returns>A deep clone of this part</returns>
        public Part DeepClone()
        {
            return new Part
            {
                PartType = PartType,
                Range = Range,
                Location = Location,
                Manufacturer = Manufacturer,
                HtmlNotes = HtmlNotes,
                Documents = Documents.ToList(),
                Suppliers = Suppliers.ToList(),
                Notes = Notes,
                PackageType = PackageType,
                Value = Value,
                ValueUnit = ValueUnit,
                PartName = PartName,
                PartNumber = PartNumber,
                Quantity = Quantity
            };
        }
    }
}