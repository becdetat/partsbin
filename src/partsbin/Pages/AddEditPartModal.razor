@using Microsoft.AspNetCore.Components
@using partsbin.Services
@inject IToastService ToastService;
@inject IPartService PartService;
@inject NavigationManager NavigationManager;

<EditForm Model="@Part" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group" style="width: 400px">
        <div style="margin-top: 10px;">
            <label for="partType">Part type</label>
            <!-- this needs to be an autocomplete -->
            <InputText id="partType"
                       class="form-control"
                       placeholder="Part type (eg. 'Capacitor')"
                       @bind-Value="Part!.PartType" />
        </div>
        <div style="margin-top: 10px;">
            <label for="range">Range</label>
            <!-- this needs to be an autocomplete -->
            <InputText id="range"
                       class="form-control"
                       placeholder="Range (eg. 'Film')"
                       @bind-Value="Part.Range" />
        </div>
        <div style="margin-top: 10px;">
            <label for="partName">Part name</label>
            <!-- this needs to be an autocomplete -->
            <InputText id="partName"
                       class="form-control"
                       placeholder="Part name (eg. 'Raspberry Pi B 4G')"
                       @bind-Value="Part.PartName" />
        </div>
        <div style="margin-top: 10px;">
            <label for="partNumber">Part number</label>
            <InputText id="partNumber"
                       class="form-control"
                       placeholder="Part number (eg. 'XC3802')"
                       @bind-Value="Part.PartNumber" />
        </div>
        <div style="margin-top: 10px;">
            <label for="manufacturer">Manufacturer</label>
            <!-- this needs to be an autocomplete -->
            <InputText id="manufacturer"
                       class="form-control"
                       placeholder="Manufacturer (eg. 'Qualcomm')"
                       @bind-Value="Part.Manufacturer" />
        </div>
        <div style="margin-top: 10px;">
            <label for="packageType">Package type</label>
            <!-- this needs to be an autocomplete -->
            <InputText id="packageType"
                       class="form-control"
                       placeholder="Package type (eg. 'DIP', 'SMD')"
                       @bind-Value="Part.PackageType" />
        </div>
        <div style="margin-top: 10px;">
            <label for="value">Value</label>
            <InputNumber id="value"
                         class="form-control"
                         placeholder="Value (eg. '0.1')"
                         @bind-Value="Part!.Value" />
        </div>
        <div style="margin-top: 10px;">
            <label for="valueUnit">Value unit</label>
            <!-- this needs to be an autocomplete -->
            <InputText id="valueUnit"
                       class="form-control"
                       placeholder="Value unit (eg. 'uF')"
                       @bind-Value="Part.ValueUnit" />
        </div>
        <div style="margin-top: 10px;">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity"
                         class="form-control"
                         placeholder="Quantity"
                         @bind-Value="Part!.Quantity" />
            <div>
                <label for="location">Location</label>
                <!-- this needs to be an autocomplete -->
                <InputText id="location"
                           class="form-control"
                           placeholder="Location (eg. 'Shelf 4 Rack 2 Tray 6')"
                           @bind-Value="Part.Location" />
            </div>
        </div>
    </div>
    <div style="margin-top: 10px;">
        <button type="submit" class="btn btn-outline-primary">
            @(_isNew ? "Add" : "Update")
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Part? Part { get; set; }
    private bool _isNew;
    [CascadingParameter]
    BlazoredModalInstance? Modal { get; set; }

    protected override void OnInitialized()
    {
        _isNew = Part is null;
        Part ??= new Part();

        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (_isNew)
            {
                Part = PartService.AddPart(Part!);
                NavigationManager.NavigateTo($"/part/{Part.Id}");
            }
            else
            {
                //await _partsService.UpdatePart(this.Part);
            }
            
            await Modal!.CloseAsync(ModalResult.Ok(Part));
        }
        catch (InvalidOperationException ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }
}

